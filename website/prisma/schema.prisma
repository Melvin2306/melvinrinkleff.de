// schema.prisma

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider          = "postgresql"
    url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
    shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Education {
    id          Int    @id @default(autoincrement())
    institution String
    degree      String
    period      String
    location    String
    url         String
    user        User?  @relation(fields: [userId], references: [id])
    userId      Int?
}

model Course {
    id          Int    @id @default(autoincrement())
    name        String
    institution String
    period      String
    location    String
    url         String
    user        User?  @relation(fields: [userId], references: [id])
    userId      Int?
}

model Experience {
    id       Int    @id @default(autoincrement())
    company  String
    position String
    period   String
    location String
    url      String
    user     User?  @relation(fields: [userId], references: [id])
    userId   Int?
}

model Voluntary {
    id           Int    @id @default(autoincrement())
    organization String
    position     String
    period       String
    location     String
    url          String
    user         User?  @relation(fields: [userId], references: [id])
    userId       Int?
}

model Project {
    id          Int    @id @default(autoincrement())
    name        String
    description String
    url         String
    user        User?  @relation(fields: [userId], references: [id])
    userId      Int?
}

model Skill {
    id     Int    @id @default(autoincrement())
    name   String
    user   User?  @relation(fields: [userId], references: [id])
    userId Int?
}

model Language {
    id     Int    @id @default(autoincrement())
    name   String
    user   User?  @relation(fields: [userId], references: [id])
    userId Int?
}

model Tool {
    id     Int    @id @default(autoincrement())
    name   String
    user   User?  @relation(fields: [userId], references: [id])
    userId Int?
}

model Social {
    id     Int    @id @default(autoincrement())
    name   String
    url    String
    user   User?  @relation(fields: [userId], references: [id])
    userId Int?
}

model User {
    id         Int          @id @default(autoincrement())
    name       String?
    email      String?      @unique
    createdAt  DateTime     @default(now()) @map(name: "created_at")
    updatedAt  DateTime     @updatedAt @map(name: "updated_at")
    Education  Education[]
    Experience Experience[]
    Project    Project[]
    Skill      Skill[]
    Language   Language[]
    Tool       Tool[]
    Social     Social[]
    Voluntary  Voluntary[]
    Course     Course[]

    @@map(name: "users")
}
